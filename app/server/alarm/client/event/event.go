// Code generated by goctl. DO NOT EDIT!
// Source: alarm.proto

package client

import (
	"context"

	"zlei/app/server/alarm/proto"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	EventReq  = proto.EventReq
	EventResp = proto.EventResp
	HelloReq  = proto.HelloReq
	HelloResp = proto.HelloResp
	HiReq     = proto.HiReq
	HiResp    = proto.HiResp

	Event interface {
		AskQuestion(ctx context.Context, in *EventReq, opts ...grpc.CallOption) (*EventResp, error)
	}

	defaultEvent struct {
		cli zrpc.Client
	}
)

func NewEvent(cli zrpc.Client) Event {
	return &defaultEvent{
		cli: cli,
	}
}

func (m *defaultEvent) AskQuestion(ctx context.Context, in *EventReq, opts ...grpc.CallOption) (*EventResp, error) {
	client := proto.NewEventClient(m.cli.Conn())
	return client.AskQuestion(ctx, in, opts...)
}
